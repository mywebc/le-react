{"version":3,"sources":["webpack:///../src/components/modal/Modal.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Modal","Api","Demo","className","parentName","mask","maskClosable","okText","cancelText","closeIcon","footer","isMDXComponent"],"mappings":"4RAUaA,G,UAAe,S,gNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,cAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,qFACA,iBAAQ,CACN,GAAM,QADR,QAGA,gCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8CAAiDC,SAAO,GACzFJ,QACAH,kBACAQ,eACAC,UACAC,UACAC,QACAC,UAPyF,gBAQzFZ,IARyF,EASzFH,eATyF,GAUxFO,QAAQ,cACb,mBAAKS,UAAU,SACT,YAAC,IAAD,CAAMT,QAAQ,WAGlB,iBAAQ,CACN,GAAM,MADR,MAGA,uBAAK,gCAAMU,WAAW,OAAU,CAC5B,UAAa,iBADZ,oQAaL,iBAAQ,CACN,GAAM,SADR,SAGA,8CACA,YAAC,IAAD,CAAYT,WAAY,EAAGC,OAAQ,4FAA+FC,SAAO,GACvIJ,QACAH,kBACAQ,eACAC,UACAC,UACAC,QACAC,UAPuI,gBAQvIZ,IARuI,EASvIH,eATuI,GAUtIO,QAAQ,cACb,mBAAKS,UAAU,SACT,YAAC,IAAD,CAAME,MAAM,EAAOX,QAAQ,SAC3B,YAAC,IAAD,CAAMY,cAAc,EAAOZ,QAAQ,WAGvC,iBAAQ,CACN,GAAM,QADR,MAGA,uBAAK,gCAAMU,WAAW,OAAU,CAC5B,UAAa,iBADZ,ijBA0BL,iBAAQ,CACN,GAAM,WADR,WAGA,yDACA,YAAC,IAAD,CAAYT,WAAY,EAAGC,OAAQ,oFAAyFC,SAAO,GACjIJ,QACAH,kBACAQ,eACAC,UACAC,UACAC,QACAC,UAPiI,gBAQjIZ,IARiI,EASjIH,eATiI,GAUhIO,QAAQ,cACb,mBAAKS,UAAU,SACT,YAAC,IAAD,CAAMI,OAAQ,KAAMC,WAAY,SAAUd,QAAQ,WAGtD,iBAAQ,CACN,GAAM,QADR,MAGA,uBAAK,gCAAMU,WAAW,OAAU,CAC5B,UAAa,iBADZ,kTAeL,iBAAQ,CACN,GAAM,aADR,aAGA,4DACA,YAAC,IAAD,CAAYT,WAAY,EAAGC,OAAQ,iGAAoGC,SAAO,GAC5IJ,QACAH,kBACAQ,eACAC,UACAC,UACAC,QACAC,UAP4I,gBAQ5IZ,IAR4I,EAS5IH,eAT4I,GAU3IO,QAAQ,cACb,mBAAKS,UAAU,SACT,YAAC,IAAD,CAAMM,UAAW,QAASf,QAAQ,SAClC,YAAC,IAAD,CAAMe,UAAW,KAAMf,QAAQ,WAGnC,iBAAQ,CACN,GAAM,QADR,MAGA,uBAAK,gCAAMU,WAAW,OAAU,CAC5B,UAAa,iBADZ,kjBAyBL,iBAAQ,CACN,GAAM,WADR,WAGA,sDACA,YAAC,IAAD,CAAYT,WAAY,GAAIC,OAAQ,iGAAoGC,SAAO,GAC7IJ,QACAH,kBACAQ,eACAC,UACAC,UACAC,QACAC,UAP6I,gBAQ7IZ,IAR6I,EAS7IH,eAT6I,GAU5IO,QAAQ,cACb,mBAAKS,UAAU,SACT,YAAC,IAAD,CAAMO,OAAQ,cAAehB,QAAQ,SACrC,YAAC,IAAD,CAAMgB,OAAQ,KAAMhB,QAAQ,WAGhC,iBAAQ,CACN,GAAM,QADR,MAGA,uBAAK,gCAAMU,WAAW,OAAU,CAC5B,UAAa,iBADZ,2lBA0BL,iBAAQ,CACN,GAAM,QADR,QAGA,4CACA,iBAAQ,CACN,GAAM,QADR,MAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mMAUL,iBAAQ,CACN,GAAM,OADR,OAGA,YAAC,IAAD,CAAKV,QAAQ,c,8MAKjBH,EAAWoB,gBAAiB","file":"component---src-components-modal-modal-mdx-12ed81bc3d90007f5893.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/chenxiaole/learnTrain/le-react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Modal from \"./Modal\";\nimport Api from \"./Api\";\nimport { Demo } from \"./Demo\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h3 {...{\n      \"id\": \"modal对话框\"\n    }}>{`Modal对话框`}</h3>\n    <p>需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 Modal 在当前页面正中打开一个浮层，承载相应的操作。</p> \n    <h2 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h2>\n    <p>第一个对话框。</p>\n    <Playground __position={2} __code={'<div className=\\\"basis\\\">\\n  <Demo />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Api,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className=\"basis\">\n        <Demo mdxType=\"Demo\" />\n  </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"使用\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"遮罩层显示\"\n    }}>{`遮罩层显示`}</h2>\n    <p>遮罩层是否显示(默认显示)，是否可点击关闭</p>\n    <Playground __position={4} __code={'<div className=\\\"basis\\\">\\n  <Demo mask={false} />\\n  <Demo maskClosable={false} />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Api,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className=\"basis\">\n        <Demo mask={false} mdxType=\"Demo\" />\n        <Demo maskClosable={false} mdxType=\"Demo\" />\n  </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"使用-1\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    mask={false}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n\n<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    maskClosable={false}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"自定义按钮文字\"\n    }}>{`自定义按钮文字`}</h2>\n    <p>设置 okText 与 cancelText 以自定义按钮文字。</p>\n    <Playground __position={6} __code={'<div className=\\\"basis\\\">\\n  <Demo okText={\\'ok\\'} cancelText={\\'cancel\\'} />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Api,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className=\"basis\">\n        <Demo okText={\"ok\"} cancelText={\"cancel\"} mdxType=\"Demo\" />\n  </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"使用-2\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    okText={\"ok\"}\n    cancelText={\"cancel\"}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"自定义关闭icon\"\n    }}>{`自定义关闭icon`}</h2>\n    <p>支持icon图标替换，传入内置图标库name即可，null即不显示图标</p>\n    <Playground __position={8} __code={'<div className=\\\"basis\\\">\\n  <Demo closeIcon={\\'smile\\'} />\\n  <Demo closeIcon={null} />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Api,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className=\"basis\">\n        <Demo closeIcon={\"smile\"} mdxType=\"Demo\" />\n        <Demo closeIcon={null} mdxType=\"Demo\" />\n  </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"使用-3\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    closeIcon={\"smile\"}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    closeIcon={null}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"自定义页脚属性\"\n    }}>{`自定义页脚属性`}</h2>\n    <p>页脚支持传入自定义button按钮，null即为不显示页脚</p>\n    <Playground __position={10} __code={'<div className=\\\"basis\\\">\\n  <Demo footer={\\'buttonArray\\'} />\\n  <Demo footer={null} />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Api,\n      Demo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div className=\"basis\">\n        <Demo footer={\"buttonArray\"} mdxType=\"Demo\" />\n        <Demo footer={null} mdxType=\"Demo\" />\n  </div>\n    </Playground>\n    <h4 {...{\n      \"id\": \"使用-4\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    footer={[\n        <Button onClick={() => {setVisible(false)}}>left</Button>\n        <Button onClick={() => {setVisible(false)}}>right</Button>\n    ]}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n<Modal\n    visible={visible}\n    title={\"this is modal title\"}\n    onCancel={() => { setVisible(false) }}\n    onConfirm={() => { setVisible(false) }}\n    footer={null}\n>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n    <p>Some contents...</p>\n</Modal>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"函数调用\"\n    }}>{`函数调用`}</h2>\n    <p>当然也非常人性化的提供了函数调用的方式</p>\n    <h4 {...{\n      \"id\": \"使用-5\"\n    }}>{`使用`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`Modal.open({\n    visible: true,\n    title: \"this is modal title\",\n    content: \"Some contents..\",\n    onCancel: () => {setVisible(false)},\n    onConfirm: () => {setVisible(false)}\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`APi`}</h2>\n    <Api mdxType=\"Api\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}